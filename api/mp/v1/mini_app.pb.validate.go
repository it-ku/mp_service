// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mp/v1/mini_app.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IdReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdReqMultiError, or nil if none found.
func (m *IdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return IdReqMultiError(errors)
	}

	return nil
}

// IdReqMultiError is an error wrapping multiple validation errors returned by
// IdReq.ValidateAll() if the designated constraints aren't met.
type IdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdReqMultiError) AllErrors() []error { return m }

// IdReqValidationError is the validation error returned by IdReq.Validate if
// the designated constraints aren't met.
type IdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdReqValidationError) ErrorName() string { return "IdReqValidationError" }

// Error satisfies the builtin error interface
func (e IdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdReqValidationError{}

// Validate checks the field values on CodeLoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CodeLoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CodeLoginReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CodeLoginReqMultiError, or
// nil if none found.
func (m *CodeLoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CodeLoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for Code

	if len(errors) > 0 {
		return CodeLoginReqMultiError(errors)
	}

	return nil
}

// CodeLoginReqMultiError is an error wrapping multiple validation errors
// returned by CodeLoginReq.ValidateAll() if the designated constraints aren't met.
type CodeLoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CodeLoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CodeLoginReqMultiError) AllErrors() []error { return m }

// CodeLoginReqValidationError is the validation error returned by
// CodeLoginReq.Validate if the designated constraints aren't met.
type CodeLoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CodeLoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CodeLoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CodeLoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CodeLoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CodeLoginReqValidationError) ErrorName() string { return "CodeLoginReqValidationError" }

// Error satisfies the builtin error interface
func (e CodeLoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCodeLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CodeLoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CodeLoginReqValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReplyMultiError, or
// nil if none found.
func (m *LoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginReplyMultiError(errors)
	}

	return nil
}

// LoginReplyMultiError is an error wrapping multiple validation errors
// returned by LoginReply.ValidateAll() if the designated constraints aren't met.
type LoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReplyMultiError) AllErrors() []error { return m }

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on GetPhoneNumberReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPhoneNumberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPhoneNumberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPhoneNumberReqMultiError, or nil if none found.
func (m *GetPhoneNumberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPhoneNumberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for Code

	if len(errors) > 0 {
		return GetPhoneNumberReqMultiError(errors)
	}

	return nil
}

// GetPhoneNumberReqMultiError is an error wrapping multiple validation errors
// returned by GetPhoneNumberReq.ValidateAll() if the designated constraints
// aren't met.
type GetPhoneNumberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPhoneNumberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPhoneNumberReqMultiError) AllErrors() []error { return m }

// GetPhoneNumberReqValidationError is the validation error returned by
// GetPhoneNumberReq.Validate if the designated constraints aren't met.
type GetPhoneNumberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPhoneNumberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPhoneNumberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPhoneNumberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPhoneNumberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPhoneNumberReqValidationError) ErrorName() string {
	return "GetPhoneNumberReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetPhoneNumberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPhoneNumberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPhoneNumberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPhoneNumberReqValidationError{}

// Validate checks the field values on GetPhoneNumberReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPhoneNumberReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPhoneNumberReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPhoneNumberReplyMultiError, or nil if none found.
func (m *GetPhoneNumberReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPhoneNumberReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return GetPhoneNumberReplyMultiError(errors)
	}

	return nil
}

// GetPhoneNumberReplyMultiError is an error wrapping multiple validation
// errors returned by GetPhoneNumberReply.ValidateAll() if the designated
// constraints aren't met.
type GetPhoneNumberReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPhoneNumberReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPhoneNumberReplyMultiError) AllErrors() []error { return m }

// GetPhoneNumberReplyValidationError is the validation error returned by
// GetPhoneNumberReply.Validate if the designated constraints aren't met.
type GetPhoneNumberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPhoneNumberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPhoneNumberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPhoneNumberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPhoneNumberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPhoneNumberReplyValidationError) ErrorName() string {
	return "GetPhoneNumberReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPhoneNumberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPhoneNumberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPhoneNumberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPhoneNumberReplyValidationError{}

// Validate checks the field values on MiniApp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MiniApp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MiniApp with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MiniAppMultiError, or nil if none found.
func (m *MiniApp) ValidateAll() error {
	return m.validate(true)
}

func (m *MiniApp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for OriginalId

	// no validation rules for AppId

	// no validation rules for AppSecret

	// no validation rules for Platform

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return MiniAppMultiError(errors)
	}

	return nil
}

// MiniAppMultiError is an error wrapping multiple validation errors returned
// by MiniApp.ValidateAll() if the designated constraints aren't met.
type MiniAppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MiniAppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MiniAppMultiError) AllErrors() []error { return m }

// MiniAppValidationError is the validation error returned by MiniApp.Validate
// if the designated constraints aren't met.
type MiniAppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MiniAppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MiniAppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MiniAppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MiniAppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MiniAppValidationError) ErrorName() string { return "MiniAppValidationError" }

// Error satisfies the builtin error interface
func (e MiniAppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiniApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MiniAppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MiniAppValidationError{}

// Validate checks the field values on ListAppReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAppReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAppReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAppReqMultiError, or
// nil if none found.
func (m *ListAppReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAppReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Current

	// no validation rules for PageSize

	// no validation rules for Name

	// no validation rules for Platform

	if len(errors) > 0 {
		return ListAppReqMultiError(errors)
	}

	return nil
}

// ListAppReqMultiError is an error wrapping multiple validation errors
// returned by ListAppReq.ValidateAll() if the designated constraints aren't met.
type ListAppReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppReqMultiError) AllErrors() []error { return m }

// ListAppReqValidationError is the validation error returned by
// ListAppReq.Validate if the designated constraints aren't met.
type ListAppReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppReqValidationError) ErrorName() string { return "ListAppReqValidationError" }

// Error satisfies the builtin error interface
func (e ListAppReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppReqValidationError{}

// Validate checks the field values on ListAppReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAppReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAppReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAppReplyMultiError, or
// nil if none found.
func (m *ListAppReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAppReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAppReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAppReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAppReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAppReplyMultiError(errors)
	}

	return nil
}

// ListAppReplyMultiError is an error wrapping multiple validation errors
// returned by ListAppReply.ValidateAll() if the designated constraints aren't met.
type ListAppReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppReplyMultiError) AllErrors() []error { return m }

// ListAppReplyValidationError is the validation error returned by
// ListAppReply.Validate if the designated constraints aren't met.
type ListAppReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppReplyValidationError) ErrorName() string { return "ListAppReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListAppReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppReplyValidationError{}

// Validate checks the field values on CreateAppReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateAppReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAppReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateAppReqMultiError, or
// nil if none found.
func (m *CreateAppReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAppReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for OriginalId

	// no validation rules for AppId

	// no validation rules for AppSecret

	// no validation rules for Platform

	// no validation rules for Type

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return CreateAppReqMultiError(errors)
	}

	return nil
}

// CreateAppReqMultiError is an error wrapping multiple validation errors
// returned by CreateAppReq.ValidateAll() if the designated constraints aren't met.
type CreateAppReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAppReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAppReqMultiError) AllErrors() []error { return m }

// CreateAppReqValidationError is the validation error returned by
// CreateAppReq.Validate if the designated constraints aren't met.
type CreateAppReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAppReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAppReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAppReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAppReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAppReqValidationError) ErrorName() string { return "CreateAppReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateAppReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAppReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAppReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAppReqValidationError{}

// Validate checks the field values on UpdateAppReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateAppReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateAppReqMultiError, or
// nil if none found.
func (m *UpdateAppReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for OriginalId

	// no validation rules for AppId

	// no validation rules for AppSecret

	// no validation rules for Platform

	// no validation rules for Type

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return UpdateAppReqMultiError(errors)
	}

	return nil
}

// UpdateAppReqMultiError is an error wrapping multiple validation errors
// returned by UpdateAppReq.ValidateAll() if the designated constraints aren't met.
type UpdateAppReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppReqMultiError) AllErrors() []error { return m }

// UpdateAppReqValidationError is the validation error returned by
// UpdateAppReq.Validate if the designated constraints aren't met.
type UpdateAppReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppReqValidationError) ErrorName() string { return "UpdateAppReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAppReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppReqValidationError{}

// Validate checks the field values on UpdateAppReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateAppReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateAppReplyMultiError,
// or nil if none found.
func (m *UpdateAppReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateAppReplyMultiError(errors)
	}

	return nil
}

// UpdateAppReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateAppReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateAppReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppReplyMultiError) AllErrors() []error { return m }

// UpdateAppReplyValidationError is the validation error returned by
// UpdateAppReply.Validate if the designated constraints aren't met.
type UpdateAppReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppReplyValidationError) ErrorName() string { return "UpdateAppReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAppReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppReplyValidationError{}
