// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.17.3
// source: mp/v1/mini_app.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMiniAppServiceGetPhoneNumber = "/mp.v1.MiniAppService/GetPhoneNumber"
const OperationMiniAppServiceLoginByCode = "/mp.v1.MiniAppService/LoginByCode"

type MiniAppServiceHTTPServer interface {
	// GetPhoneNumber 通过code获取用户手机号
	GetPhoneNumber(context.Context, *GetPhoneNumberReq) (*GetPhoneNumberReply, error)
	// LoginByCode 通过code获取openid并登录
	LoginByCode(context.Context, *CodeLoginReq) (*LoginReply, error)
}

func RegisterMiniAppServiceHTTPServer(s *http.Server, srv MiniAppServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/wx/loginByCode", _MiniAppService_LoginByCode0_HTTP_Handler(srv))
	r.POST("/v1/wx/getPhoneNumber", _MiniAppService_GetPhoneNumber0_HTTP_Handler(srv))
}

func _MiniAppService_LoginByCode0_HTTP_Handler(srv MiniAppServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CodeLoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMiniAppServiceLoginByCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByCode(ctx, req.(*CodeLoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _MiniAppService_GetPhoneNumber0_HTTP_Handler(srv MiniAppServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPhoneNumberReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMiniAppServiceGetPhoneNumber)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPhoneNumber(ctx, req.(*GetPhoneNumberReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPhoneNumberReply)
		return ctx.Result(200, reply)
	}
}

type MiniAppServiceHTTPClient interface {
	GetPhoneNumber(ctx context.Context, req *GetPhoneNumberReq, opts ...http.CallOption) (rsp *GetPhoneNumberReply, err error)
	LoginByCode(ctx context.Context, req *CodeLoginReq, opts ...http.CallOption) (rsp *LoginReply, err error)
}

type MiniAppServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewMiniAppServiceHTTPClient(client *http.Client) MiniAppServiceHTTPClient {
	return &MiniAppServiceHTTPClientImpl{client}
}

func (c *MiniAppServiceHTTPClientImpl) GetPhoneNumber(ctx context.Context, in *GetPhoneNumberReq, opts ...http.CallOption) (*GetPhoneNumberReply, error) {
	var out GetPhoneNumberReply
	pattern := "/v1/wx/getPhoneNumber"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMiniAppServiceGetPhoneNumber))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MiniAppServiceHTTPClientImpl) LoginByCode(ctx context.Context, in *CodeLoginReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/wx/loginByCode"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMiniAppServiceLoginByCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
